<!--
	Serialization Settings Patch File for Unicorn

	This file configures the Unicorn serialization system, which enables automatic synchronization of Sitecore items
	without packages or manual merging.
	
	http://github.com/kamsar/Unicorn
-->
<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/">
	<sitecore>
		<unicorn>
			<!-- 
				Configurations
				
				These define sets  of configuration that Unicorn can run. For example, you might want to serialize
				certain items differently, or segregate configurations so that critical ones can run separately
				from non-essential ones to save time.
				
				See the README here for more information:
				https://github.com/kamsar/Unicorn/blob/master/README.md
				
				If you're familiar with DI and IoC containers, this configuration is effectively a container configuration.
				By default the container internally is Ninject.
				
				Each dependency type can have non-DI constructor params passed to it by adding XML attributes to the
				main declaration - e.g. <foo type="..." bar="hello"> would pass "hello" to public MyType(string bar)
				
				You can also receive any XML body passed to the dependency to a 'configNode' XmlElement parameter.
				This is how the SerializationPresetPredicate defines its preset.
			-->
			<configurations>
				<configuration name="Default Configuration">
					<!--
						The SerializationPresetPredicate can be configured in one of two ways. The default is shown below,
						but you can also remove the configuration body and self-close the <predicate> tag, then add a 
						"presetName" attribute that points to the name of a Sitecore serialization preset (see the serialization guide on SDN)
						if you want to refer to an externally defined preset - for example if two configurations shared the same preset config.
					-->
					<predicate type="Unicorn.Predicates.SerializationPresetPredicate, Unicorn" singleInstance="true">
						<!-- 
							See the Sitecore Serialization Guide from SDN for more details on how Serialization Preset syntax works. This configuration is used
							by the default Unicorn Predicate to determine what items should be serialized and synced by Unicorn.

							Each include can also have several types of exclusion added under them to exclude specific subitems:
							<exclude path="/sitecore/content" />
							<exclude template="Page" />
							<exclude templateid="{8EF706F3-71D1-4EE2-BADF-99018AF186C9}" />
							<exclude id="{8EF706F3-71D1-4EE2-BADF-99018AF186C9}" />
						-->
            <include database="master" path="/sitecore/Layout/Layouts/MVC Layout"/>
            <include database="master" path="/sitecore/Layout/Models"/>
			<include database="master" path="/sitecore/Layout/Placeholder Settings"/>
            <include database="master" path="/sitecore/Layout/Renderings/MVC Tutorial"/>
            <include database="master" path="/sitecore/templates/MVC Tutorial"/>
            <include database="master" path="/sitecore/Media Library/Images"/>
            <include database="master" path="/sitecore/content/Home"/>


          </predicate>
				</configuration>
				<!-- 
					You can define additional <configuration>s here to account for different serialization needs.
					Each configuration can override the default dependencies listed below in <defaults> to customize
					its behaviours.
				-->
			</configurations>

			<!-- 
				These are the default Unicorn dependency configurations. These affect all configurations,
				unless specifically overridden in the configuration definition.
			-->
			<defaults>
				<sourceDataProvider type="Unicorn.Data.SitecoreSourceDataProvider, Unicorn" singleInstance="true" />

				<evaluator type="Unicorn.Evaluators.SerializedAsMasterEvaluator, Unicorn" singleInstance="true" />
					<evaluatorLogger type="Unicorn.Evaluators.DefaultSerializedAsMasterEvaluatorLogger, Unicorn" singleInstance="true" />

				<!-- there is no default predicate, because this must be configured for each configuration -->
				<predicate type="null" />

				<!-- Note: the SitecoreSerializationProvider does NOT respect FieldPredicates because it uses Sitecore APIs (the FiatSitecoreSerializationProvider does respect it) -->
				<fieldPredicate type="Unicorn.Predicates.ConfigurationFieldPredicate, Unicorn" singleInstance="true">
					<!--<exclude fieldID="{4AE50ED9-BA07-4702-992E-A912738D32DC}" note="You can leave notes here about what this field is or why you're excluding it." />-->
				</fieldPredicate>

				<!-- note that the DebugSerializationLoaderLogger is also available if you want more detailed logging and timing information -->
				<loaderLogger type="Unicorn.Loader.DefaultSerializationLoaderLogger, Unicorn" singleInstance="true" />

				<loaderConsistencyChecker type="Unicorn.Loader.DuplicateIdConsistencyChecker, Unicorn" />
					<loaderConsistencyCheckerLogger type="Unicorn.Loader.DefaultDuplicateIdConsistencyCheckerLogger, Unicorn" singleInstance="false" />

				<loaderDeserializeFailureRetryer type="Unicorn.Loader.DeserializeFailureRetryer, Unicorn" singleInstance="false" />

				<!-- 
					Note the Serialization Provider's rootPath can be any of:
					Absolute filesystem path, e.g. c:\foo\bar
					Web-root-relative path, e.g. ~/data/serialization or ~/../out-of-root-serialization
					"default", e.g. standard Sitecore serialization path
				-->
				<serializationProvider type="Unicorn.Serialization.Sitecore.Fiat.FiatSitecoreSerializationProvider, Unicorn" rootPath="C:\Sitecore Projects\Projects\Sitecore MVC Contrib\sample-sitecore-mvc\MVC\App_Data\serialization" singleInstance="true" />
					<serializationProviderLogger type="Unicorn.Serialization.Sitecore.Fiat.DefaultFiatDeserializerLogger, Unicorn" singleInstance="true" />

				<dataProvider type="Unicorn.DefaultUnicornDataProviderLogger, Unicorn" singleInstance="true" />

				<logger type="Unicorn.Logging.PubSubLogger, Unicorn" singleInstance="true" />
			</defaults>

			<!--
				The configuration provider wires up how the configuration(s) Unicorn is running are parsed.
				The default provider reads values from this config section.
			-->
			<configurationProvider type="Unicorn.Configuration.XmlConfigurationProvider, Unicorn" />
		</unicorn>

		<processors>
			<saveUI>
				<!-- 
					This processor will compare the pre-save version of the item to what's serialized on disk
					and throw a warning box if they do not match. This helps prevent overwriting of data if you
					happen to forget to sync changes into Sitecore.
					
					All configurations are evaluated by the processor. Fields ignored by the FieldPredicate are ignored.
				-->
				<processor patch:before="*[@type='Sitecore.Pipelines.Save.Save, Sitecore.Kernel']" mode="on" type="Unicorn.SerializationConflictProcessor, Unicorn"/>
			</saveUI>
		</processors>

		<pipelines>
			<httpRequestBegin>
				<!-- 
					This pipeline handler shows the Unicorn control panel. You can customize the URL the control panel lives at by changing the activationUrl. 
					The activationUrl must be a URL that the Sitecore pipeline won't ignore (e.g. .aspx, .ashx, etc)
				-->
				<processor patch:after="*[@type='Sitecore.Pipelines.HttpRequest.UserResolver, Sitecore.Kernel']" type="Unicorn.ControlPanel.UnicornControlPanelPipelineProcessor">
					<param desc="activationUrl">/unicorn.aspx</param>
				</processor>
			</httpRequestBegin>
		</pipelines>

		<dataProviders>
			<!-- 
				Register the Unicorn data provider for use. If a database hooks to the Unicorn data provider it will
				automatically write changes to the database that match any configured predicate into the serialization provider.
				
				Changes that only affect Revision, Modified, or any fields ignored by FieldPredicates will be ignored.
			-->
			<unicorn type="Unicorn.Unicorn$(database)DataProvider, Unicorn">
				<param connectionStringName="$(1)"/>
				<Name>$(1)</Name>
			</unicorn>
		</dataProviders>

		<!-- 
			Hook the Unicorn Data Provider into the master and core databases.
			If you're not syncing anything in core you can safely unregister it from here.
			If you want to sync something to another database register it here.
			
			It's safe to remove this config section on any environment where you are not collecting item changes,
			which may mean anywhere other than local development sites. This will avoid any performance hit from writing unused serialized files.
		-->
		<databases>
			<database id="master">
				<dataProviders>
					<dataProvider>
						<patch:attribute name="ref">dataProviders/unicorn</patch:attribute>
					</dataProvider>
				</dataProviders>
			</database>
			<database id="core">
				<dataProviders>
					<dataProvider>
						<patch:attribute name="ref">dataProviders/unicorn</patch:attribute>
					</dataProvider>
				</dataProviders>
			</database>
		</databases>
	</sitecore>
</configuration>
